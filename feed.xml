<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Natdanai Puthom</title>
    <link href="https://natdanaiputhom.github.io/feed.xml" rel="self" />
    <link href="https://natdanaiputhom.github.io" />
    <updated>2024-06-14T03:24:39+02:00</updated>
    <author>
        <name>Natdanai Puthom</name>
    </author>
    <id>https://natdanaiputhom.github.io</id>

    <entry>
        <title>Reflection &amp; Serialization</title>
        <author>
            <name>Natdanai Puthom</name>
        </author>
        <link href="https://natdanaiputhom.github.io/reflection/"/>
        <id>https://natdanaiputhom.github.io/reflection/</id>
        <media:content url="https://natdanaiputhom.github.io/media/posts/19/comingsoon2.png" medium="image" />
            <category term="Personal Project"/>

        <updated>2024-06-14T03:16:49+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://natdanaiputhom.github.io/media/posts/19/comingsoon2.png" alt="" />
                    test
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://natdanaiputhom.github.io/media/posts/19/comingsoon2.png" class="type:primaryImage" alt="" /></p>
                <p>test</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Simple Arena (long term project)</title>
        <author>
            <name>Natdanai Puthom</name>
        </author>
        <link href="https://natdanaiputhom.github.io/the-lost-arena-tales-of-timeless-adventure/"/>
        <id>https://natdanaiputhom.github.io/the-lost-arena-tales-of-timeless-adventure/</id>
        <media:content url="https://natdanaiputhom.github.io/media/posts/16/workinprogress.png" medium="image" />
            <category term="Personal Project"/>

        <updated>2024-04-10T03:49:09+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://natdanaiputhom.github.io/media/posts/16/workinprogress.png" alt="" />
                    (coming soon, i don't know when, maybe few months or few years as I only do this when I have&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://natdanaiputhom.github.io/media/posts/16/workinprogress.png" class="type:primaryImage" alt="" /></p>
                <p><strong>(coming soon, i don't know when, maybe few months or few years as I only do this when I have free time)</strong></p>
<p><strong>Started</strong>: 2024</p>
<p><strong>Status</strong>: Ongoing</p>
<p>Marked <span style="color: #e03e2d;">Red Area</span> is outside arena boundary and upon falling deep enough to touch the triggerzone will cause instant death. </p>
<div class="content">
<div class="textLeft"> </div>
<div class="ImageContainerWithText">
<div class="image-container"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/16/map1.png" alt="" width="2048" height="2048" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/16/responsive/map1-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/16/responsive/map1-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/16/responsive/map1-md.png 768w ,https://natdanaiputhom.github.io/media/posts/16/responsive/map1-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/16/responsive/map1-xl.png 1600w"></div>
<div class="text-container">Map 1</div>
</div>
<div class="textRight"> </div>
<div class="ImageContainerWithText">
<div class="image-container"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/16/map2.png" alt="" width="2048" height="2048" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/16/responsive/map2-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/16/responsive/map2-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/16/responsive/map2-md.png 768w ,https://natdanaiputhom.github.io/media/posts/16/responsive/map2-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/16/responsive/map2-xl.png 1600w"></div>
<div class="text-container">Map 2</div>
<div> </div>
</div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Game Concept</strong></h5>
<p><strong>Camera</strong>: 3D, top down with slightly angle. Camera is following the Player. You will not always see the whole map but nothing will be blocking Player's view.</p>
<p><strong>Mode</strong>: PVP (1v1v1v1, 2v2v2v2 and 4v4) and PVE (adventure mode a max team size of 4)</p>
<p><strong>Before </strong>match: You pick a class and equipment.</p>
<p><strong>Class</strong>: Each class have its own Stats value and unique abilities and attacks</p>
<p><strong>Equipment</strong>: You can only have one equipped equipment at a time. Each equipment replace or add some abilities/attacks to the Class abilities.</p>
<p><strong>Item</strong>: Maybe in future. These items will only be dropped <em>'randomly'</em> across the map where the Player can pick it up such as '<span style="color: #2dc26b;">Health</span>' and '<span style="color: #3598db;">Speed</span>' potions.</p>
<p><strong>Match</strong>: A match consist of 3 rounds. Each round has a time limit. 5 minutes for 4v4 and 2 minutes for other modes.</p>
<p><strong>Score</strong>: Score is based on individual damage dealt. A base score is given if your attack finish off opponent. Winner is decided by an individual score or total score of a team. Pushing enemy out of boundary will only yield a base killing score plus the damage dealt by the attack/ability  that pushes them out. If all opponents are killed before the time run out, the surviving individual or team will gain a base score each.</p>
</div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Stats</strong></h5>
<p><strong>Health: </strong>Character's Health. Death upon reaching 0 Health</p>
<p><strong>Mana: </strong>Base mana amount. Mana is used to cast abilities. (some attacks may require mana)</p>
<p><strong>STR: </strong>Base character's attack damage</p>
<p><strong>JMP: </strong>Base character's jump height</p>
<p><strong>SPD: </strong>Base character's movement speed</p>
<p><strong> DEF: </strong>Base character's defense</p>
</div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Base Controls</strong></h5>
<p><strong>Movements</strong>: Arrow Keys</p>
<p><strong>Jump</strong>: V</p>
<p><strong>Attacks/Abilities</strong>: Z X C. Some Attacks/Abilities are <em>'<span style="color: #e03e2d;">Unblockable</span>'</em></p>
<p><strong>Block</strong>: XC. Blocked an attack/ability take reduced damage and cannot reduce <em>'<span style="color: #2dc26b;">Health</span>'</em> below 1.</p>
<p><strong>Counter</strong>: begin hit by an attack while <em>'Block' </em>is active and pressing X or C will active <em>'<span style="color: #3598db;">Counter</span>'. </em>Doing <em>'<span style="color: #3598db;">Counter</span>'</em> consumes<span style="color: #000000;"><em> '<span style="color: #2dc26b;">Health</span>'</em></span>. '<span style="color: #3598db;">Counter</span>' cannot reduce '<span style="color: #2dc26b;">Health</span>' below 1.</p>
<p>Using these keys to perform multiple combos</p>
</div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Current Plan (Summer 2024)</strong></h5>
<p>The current plan is to have 2 unique classes, equipment's and maps and focus on polishing core mechanics and game loop targeting PVP mode of 1v1 only. Of course this require the fundamental systems to be polished and scalable in the future.</p>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Thread Pool</title>
        <author>
            <name>Natdanai Puthom</name>
        </author>
        <link href="https://natdanaiputhom.github.io/thread-pool/"/>
        <id>https://natdanaiputhom.github.io/thread-pool/</id>
        <media:content url="https://natdanaiputhom.github.io/media/posts/13/thread-2.png" medium="image" />
            <category term="Personal Project"/>

        <updated>2024-04-08T18:47:26+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://natdanaiputhom.github.io/media/posts/13/thread-2.png" alt="" />
                    Initially, my pathfinding algorithm led to performance loss when multiple enemies on a vast map attempted to calculate paths simultaneously,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://natdanaiputhom.github.io/media/posts/13/thread-2.png" class="type:primaryImage" alt="" /></p>
                <div class="content">
<div class="textLeft">
<p>Initially, my pathfinding algorithm led to performance loss when multiple enemies on a vast map attempted to calculate paths simultaneously, sometimes every frame. To enhance this, I devised a solution where, regardless of their current state, enemies could persist in their activities while awaiting the completion of path calculations. This transition ensured that upon receiving their calculated paths, they could effortlessly shift to the next state, utilizing the paths without hindering much of performance. That solution was thread pool, by making use of modern CPU, which usually come with multi-cores and threads. I encountered a subsequent challenge where certain tasks needed to be executed as swiftly as possible, which current thread pool class could not meet the requirement. To address this, I designed a separate priority queue for such tasks, assigning them a priority range from 0.0 to 1.0, with higher numbers indicating higher priority. This ensured that tasks in the priority queue were executed before those in the normal queue. After a code review, my classmates and I engaged in a discussion concerning the potential issue of certain tasks never begin executed if higher priority tasks were continuously added.</p>
</div>
<div class="image"><a href="https://natdanaiputhom.github.io/threadpool2.png" target="_blank" rel="noopener noreferrer"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/13/threadpool2.png" alt="" width="1597" height="652" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/13/responsive/threadpool2-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/13/responsive/threadpool2-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/13/responsive/threadpool2-md.png 768w ,https://natdanaiputhom.github.io/media/posts/13/responsive/threadpool2-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/13/responsive/threadpool2-xl.png 1600w"></figure></a></div>
</div>
<div class="content">
<div class="textLeft">
<pre>"What if some tasks remain unexecuted due to the constant influx of higher priority tasks?"</pre>
<p>The solution I had in mind was some sort of timer for every tasks in queue. Since this 'potential issue' had not yet occurred, I decided it wasn't necessary to allocate time to address it immediately. Instead, I documented it, along with other potential issues and improvements, for future consideration.</p>
</div>
<div class="image"><a href="https://natdanaiputhom.github.io/threadpool3.png" target="_blank" rel="noopener noreferrer"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/13/threadpool3.png" alt="" width="1597" height="652" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/13/responsive/threadpool3-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/13/responsive/threadpool3-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/13/responsive/threadpool3-md.png 768w ,https://natdanaiputhom.github.io/media/posts/13/responsive/threadpool3-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/13/responsive/threadpool3-xl.png 1600w"></figure></a></div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Streamer Attacked by Aliens Live On Stream!</title>
        <author>
            <name>Natdanai Puthom</name>
        </author>
        <link href="https://natdanaiputhom.github.io/the-laboratory/"/>
        <id>https://natdanaiputhom.github.io/the-laboratory/</id>
        <media:content url="https://natdanaiputhom.github.io/media/posts/12/afwaf-2.png" medium="image" />
            <category term="Group Project"/>

        <updated>2024-04-08T18:40:42+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://natdanaiputhom.github.io/media/posts/12/afwaf-2.png" alt="" />
                    (this post is on-hold of writing) Details: My contributions: Player controls and movements Player's animation transitions Gun system UI system
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://natdanaiputhom.github.io/media/posts/12/afwaf-2.png" class="type:primaryImage" alt="" /></p>
                <p><strong>(this post is on-hold of writing)</strong></p>
<p><strong>Details:</strong></p>
<ul>
<li>A 3D game inspired by <strong>Call of Duty: World at War Zombies. Nach der untoten.</strong></li>
<li>14-weeks development (20 hours per week)</li>
<li>Game made fully using our group custom engine <strong>TempEngine.</strong></li>
</ul>
<p><strong>My contributions:</strong></p>
<ul>
<li>Player controls and movements</li>
<li>Player's animation transitions</li>
<li>Gun system</li>
<li>UI system</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Kurt&#x27;s Night Shift</title>
        <author>
            <name>Natdanai Puthom</name>
        </author>
        <link href="https://natdanaiputhom.github.io/kurts-night-shift/"/>
        <id>https://natdanaiputhom.github.io/kurts-night-shift/</id>
        <media:content url="https://natdanaiputhom.github.io/media/posts/11/ezgif-3-71cf0a8b42.gif" medium="image" />
            <category term="Game Jam"/>

        <updated>2024-04-08T18:20:08+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://natdanaiputhom.github.io/media/posts/11/ezgif-3-71cf0a8b42.gif" alt="" />
                    The Game Assembly Discord announced a 48-hour game jam hosted by Climax Studio. At that time, my understanding of a&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://natdanaiputhom.github.io/media/posts/11/ezgif-3-71cf0a8b42.gif" class="type:primaryImage" alt="" /></p>
                <div class="content">
<div class="textCenterScrollView">
<p>The Game Assembly Discord announced a 48-hour game jam hosted by Climax Studio. At that time, my understanding of a 'game jam' was limited to the basic concept of game creation. Eager to participate, I joined forces with fellow students to form a team called Tiny Green Ants and we registered for the Climax Game Jam. This was my first game jam experience and it turned out to be incredibly enjoyable! It was so engaging that I found myself on the brink of addiction, barely sleeping throughout those 48 hours. Despite the exhilaration, I've decided that in future game jams, I will make sure to get proper rest. I am proud to have secured 3rd place in this friendly game jam, a remarkable achievement and learning experiences.</p>
</div>
</div>
<h5> </h5>
<h5 class="testContainer"> <img src="https://natdanaiputhom.github.io/media/posts/11/tiny.png" alt="" width="86" height="64" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-md.png 768w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xl.png 1600w"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/11/tiny.png" alt="" width="86" height="64" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-md.png 768w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xl.png 1600w"><img src="https://natdanaiputhom.github.io/media/posts/11/tiny.png" alt="" width="86" height="64" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-md.png 768w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xl.png 1600w"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/11/tiny.png" alt="" width="86" height="64" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-md.png 768w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xl.png 1600w"><img src="https://natdanaiputhom.github.io/media/posts/11/tiny.png" alt="" width="86" height="64" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-md.png 768w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xl.png 1600w"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/11/tiny.png" alt="" width="86" height="64" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-md.png 768w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xl.png 1600w"><img src="https://natdanaiputhom.github.io/media/posts/11/tiny.png" alt="" width="86" height="64" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-md.png 768w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xl.png 1600w"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/11/tiny.png" alt="" width="86" height="64" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-md.png 768w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xl.png 1600w"><img src="https://natdanaiputhom.github.io/media/posts/11/tiny.png" alt="" width="86" height="64" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-md.png 768w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xl.png 1600w"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/11/tiny.png" alt="" width="86" height="64" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-md.png 768w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/11/responsive/tiny-xl.png 1600w"></h5>
<h5> </h5>
<div class="content">
<div class="textLeft">
<h5><strong>Character movements</strong></h5>
<p>I aimed for the character to rotate along the y-axis withing a 0 to 180-degree range, based on the mouse's position on the x-axis. Due to the time constraints preventing further investigation into the spin-walking issue, I opted to calculate the distance between the mouse position and the character, introducing a minimum threshold for how close the mouse can be to the character. If the distance falls below this threshold, the character won't rotate. The downside of this method is that it causes the character to snap quickly in certain mouse positions. However, this was deemed bearable compared to the constant spin-walking players would experience, as revealed through a quick playtest by my teammates.</p>
</div>
<div class="image"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/11/vlc_0qgOip2WCj.gif" alt="" width="1597" height="652"></figure></div>
</div>
<div class="content">
<div class="image"><figure class="post__image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/11/vlc_iKacL3qsjY.gif" alt="" width="1073" height="629"></figure></div>
<div class="textRight">
<h5><strong>Dialogue System</strong></h5>
<div class="textCenter100">
<p>Among other features, I implemented were the 3D sprite pop-up utilizing 3D planes with applied textures that include transparency. Additionally, I incorporated dialogue text system which also triggers voice lines recorded by our game artist.</p>
</div>
</div>
</div>
<div class="content">
<div class="textLeft">
<p>Among other tasks I contributed to during this game jam, setting up a Discord server, managing the Perforce mainline and Unity project, and creating tutorial videos to assist my teammates in setting up their workspaces were some of the activities.</p>
</div>
</div>
<p><em>You can play Kurt's Night Shift here at <a href="https://despacitos.itch.io/kurts-night-shift" target="_blank" rel="noopener noreferrer">https://despacitos.itch.io/kurts-night-shift</a> </em></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Hamster 16</title>
        <author>
            <name>Natdanai Puthom</name>
        </author>
        <link href="https://natdanaiputhom.github.io/hamster-16/"/>
        <id>https://natdanaiputhom.github.io/hamster-16/</id>
        <media:content url="https://natdanaiputhom.github.io/media/posts/10/ezgif-7-6f8b3425a8.gif" medium="image" />
            <category term="Game Jam"/>

        <updated>2024-04-08T18:18:40+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://natdanaiputhom.github.io/media/posts/10/ezgif-7-6f8b3425a8.gif" alt="" />
                    The Game Assembly (TGA) hosted 48-hours in-house game jam, and I couldn't resist how fun it sounded! The theme was&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://natdanaiputhom.github.io/media/posts/10/ezgif-7-6f8b3425a8.gif" class="type:primaryImage" alt="" /></p>
                <div class="content">
<div class="textCenterScrollView">
<p>The Game Assembly (TGA) hosted 48-hours in-house game jam, and I couldn't resist how fun it sounded! The theme was "Isolation", but if you've tried the game, you'll notice ours is quite the opposite. The hamsters are isolated, yet they are not! We had a really fun experience playing Hamster 16 with other TGA students. Initially, players started off by attacking each other and harbouring wicked thoughts, but they soon begin to cooperated, trying to beat the game! One team managed to clear the game after more than half an hour and witnessed the ending cinematics! The ironic quote of the day was, "One last game!".</p>
</div>
</div>
<div class="content">
<div class="textCenterScrollView">
<p>Due to some unknown issues the WebGL version could not display some visual effects and ending cinematic properly. Unfortunately, since the time was short, we did not had extra time to allocate to investigate and fix this issues. If you're interested you can try to download the game and play with your friends or colleagues!</p>
</div>
</div>
<div class="content">
<div class="textCenterScrollView">
<p><strong><em>Recommended of 2 - 4 players using hand controllers and loud stereo speakers! You can play Hamster 16 on the website or download the game here at <a href="https://carrydev.itch.io/hamster16">https://carrydev.itch.io/hamster16</a></em></strong></p>
<figure class="contactMeImageLink"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/10/Screenshot-2024-04-09-at-18-42-13-Edit-project-2.png" alt="" width="256" height="256" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/10/responsive/Screenshot-2024-04-09-at-18-42-13-Edit-project-2-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/10/responsive/Screenshot-2024-04-09-at-18-42-13-Edit-project-2-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/10/responsive/Screenshot-2024-04-09-at-18-42-13-Edit-project-2-md.png 768w ,https://natdanaiputhom.github.io/media/posts/10/responsive/Screenshot-2024-04-09-at-18-42-13-Edit-project-2-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/10/responsive/Screenshot-2024-04-09-at-18-42-13-Edit-project-2-xl.png 1600w"></figure>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Spite: String of Fate</title>
        <author>
            <name>Natdanai Puthom</name>
        </author>
        <link href="https://natdanaiputhom.github.io/streamer-attacked-by-aliens-live-on-stream/"/>
        <id>https://natdanaiputhom.github.io/streamer-attacked-by-aliens-live-on-stream/</id>
        <media:content url="https://natdanaiputhom.github.io/media/posts/9/spite.png" medium="image" />
            <category term="Group Project"/>

        <updated>2024-04-08T17:59:58+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://natdanaiputhom.github.io/media/posts/9/spite.png" alt="" />
                    (this post is on-hold of writing) Details: My contributions: Player controls and movements Player attacks and abilities Navmesh and pathfinder
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://natdanaiputhom.github.io/media/posts/9/spite.png" class="type:primaryImage" alt="" /></p>
                <p><strong>(this post is on-hold of writing)</strong></p>
<p><strong>Details:</strong></p>
<ul>
<li>A 3D game inspired by <strong>Diablo 3</strong>.</li>
<li>Game project 6.</li>
<li>10-weeks development (20 hours per week)</li>
<li>Game made with our group custom engine, <strong>TempEngine</strong> with Unity as Editor.</li>
</ul>
<p><strong>My contributions:</strong></p>
<ul>
<li>Player controls and movements</li>
<li>Player attacks and abilities</li>
<li>Navmesh and pathfinder</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>The Laboratory</title>
        <author>
            <name>Natdanai Puthom</name>
        </author>
        <link href="https://natdanaiputhom.github.io/spite-string-of-fate/"/>
        <id>https://natdanaiputhom.github.io/spite-string-of-fate/</id>
        <media:content url="https://natdanaiputhom.github.io/media/posts/8/labatory-2.png" medium="image" />
            <category term="Group Project"/>

        <updated>2024-04-08T17:58:31+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://natdanaiputhom.github.io/media/posts/8/labatory-2.png" alt="" />
                    (this post is on-hold of writing) Details: My contributions: Player character controls Camera Helping with building our custom engine from&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://natdanaiputhom.github.io/media/posts/8/labatory-2.png" class="type:primaryImage" alt="" /></p>
                <p><strong>(this post is on-hold of writing)</strong></p>
<p><strong>Details:</strong></p>
<ul>
<li>A 3D game inspired by <strong>The Room</strong>.</li>
<li>Game project 5.</li>
<li>4-weeks development (20 hours per week)</li>
<li>Game made with our group custom engine, <strong>TempEngine </strong>and using Unity as Editor</li>
</ul>
<p><strong>My contributions:</strong></p>
<ul>
<li>Player character controls</li>
<li>Camera</li>
<li>Helping with building our custom engine from scratch</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>SimpleEngine</title>
        <author>
            <name>Natdanai Puthom</name>
        </author>
        <link href="https://natdanaiputhom.github.io/simpleengine/"/>
        <id>https://natdanaiputhom.github.io/simpleengine/</id>
        <media:content url="https://natdanaiputhom.github.io/media/posts/7/progart.png" medium="image" />
            <category term="Personal Project"/>

        <updated>2024-04-08T15:35:40+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://natdanaiputhom.github.io/media/posts/7/progart.png" alt="" />
                    Inspired by my experiences with 'SimpleJson' which, ironically, was anything but simple, I set out to craft my own engine,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://natdanaiputhom.github.io/media/posts/7/progart.png" class="type:primaryImage" alt="" /></p>
                <div class="content">
<div class="textCenterScrollView">
<p>Inspired by my experiences with 'SimpleJson' which, ironically, was anything but simple, I set out to craft my own engine, humorously named SimpleEngine. This effort mocked the misleading "simplicity" promised by such tools. Olle, whom I had previously worked on projects like <a href="https://natdanaiputhom.github.io/spoopy-sprint/" target="_blank" rel="noopener noreferrer">Spoopy Sprint </a>and <a href="https://natdanaiputhom.github.io/spelprojekt-4/" target="_blank" rel="noopener noreferrer">Stella's Quest </a>with, harbours a distinct aversion to the use of singletons and global variables, a stance that, while typically aligning with good practice, I playfully chose to ignore for this engine. Embracing the chaos, I decided to implement everything in SimpleEngine using global pointers. What could go wrong?</p>
<p> </p>
</div>
</div>
<blockquote>
<p>Simple, it's just that easy</p>
</blockquote>
<p> </p>
<div class="content">
<div class="textLeft">
<h5><strong>DirectX11</strong></h5>
<p>SimpleEngine, initially for fun, became my gateway to learn graphics programming. In this image I've implemented deferred rendering technique with 2 point lights. I still have issues with applying ambient light from the skybox and shadow but I hope it will get resolve soon.</p>
</div>
<div class="image"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/7/deferredPointlights.png" alt="" width="1597" height="652" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/7/responsive/deferredPointlights-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/7/responsive/deferredPointlights-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/7/responsive/deferredPointlights-md.png 768w ,https://natdanaiputhom.github.io/media/posts/7/responsive/deferredPointlights-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/7/responsive/deferredPointlights-xl.png 1600w"></figure></div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Animation Loader</strong></h5>
<p>My journey into procedural animation sparked with the captivating experience of Rain World. Witnessing its dynamic animations propelled me into a deep dive into the realm of procedural animation, where I delved into the intricacies of concepts like inverse kinematics (IK). Eager to implement this in my project, I first had to tackle the basics: loading models and animations into the engine. Despite my initial lack of knowledge, I successfully integrated models, skeletons, and animations using FBXSDK. However, the animations didn't play correctly. After days of searching for the culprit, I discovered the issue was in the shader I had mistakenly used the '+' operator instead of '*'.</p>
<p> </p>
</div>
<div class="ImageContainerWithText">
<div class="image-container dynamic-size"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/7/SimpleEngine-Debug_8kfNkMub3u-1712868063513.gif" alt="" width="256" height="256"></div>
<div class="text-container">hehe</div>
</div>
<div class="ImageContainerWithText">
<div class="image-container dynamic-size offset-right"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/7/SimpleEngine_Debug_A6hPT9Xp8N.gif" alt="" width="512" height="512"></div>
<div class="text-container">finally!</div>
</div>
</div>
<p> </p>
<div class="content">
<div class="textLeft">
<h5><strong>Animation Blend</strong></h5>
<p>Utilizing a model previously created in <a href="https://natdanaiputhom.github.io/spelprojekt-3/" target="_blank" rel="noopener noreferrer">Abalabos</a>,I incorporated linear interpolation to smooth transitions between different animations for testing purposes. There are ImGui windows where it's possible to adjust transition speed and values. Unfortunate, the engine is currently on a big restructure and I don't have a good gif saved to demonstrate.</p>
<p> </p>
</div>
<div class="ImageContainerWithText">
<div class="image-container dynamic-size offset-right"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/7/SimpleEngine_Debug_ocAc1gAiZ8.gif" alt="" width="512" height="512"></div>
<div class="text-container">Animation LERP</div>
<div> </div>
</div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Profilering (EasyProfiler)</strong></h5>
<p>While implementing and testing animations, I encountered significant performance hit when updating multiple instances of the same animation type. This led me to devise several solutions.</p>
<ol>
<li>For models undergoing the same animation without variation, I update the animation once and then applying the new pose to all models sharing that animation.</li>
<li>For models with differing animations, leveraging a <a href="https://natdanaiputhom.github.io/thread-pool/" target="_blank" rel="noopener noreferrer">Thread Pool</a> to update animations concurrency before proceeding.</li>
</ol>
<p>The impact of these optimizations was remarkable, yielding a ~1 milliseconds (release) improvement per frame for 200 animations on an Intel Core i5 9400f, with even more substantial gains for models using identical animations. The rendering is still responsible for ~90% of the performance bottleneck so I'll need to optimize it in the future.</p>
<p> </p>
</div>
<div class="ImageContainerWithText">
<div class="image-container dynamic-size"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/7/SimpleEngine_Debug_2qlZNuFj0O.gif" alt="" width="780" height="780"></div>
<div class="text-container">Model created by Oliver Benedetti (SG22)</div>
</div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Profilering (Memory Leaks)</strong></h5>
<p>Using this simple memory tracker, I can check for total allocations, memory leaks, and their locations. It can be turned off in a JSON configuration file with two settings. </p>
<ol>
<li>TrackAllAllocations: this is very fast and just print amount of memory leaks.</li>
<li>TrackAllStackTraces: this is much slower but will also print out where the leaks could be.</li>
</ol>
<p>Additionally, there is a global memory tracker that keeps count during the program's lifetime. This global tracker is turned on by default to remind us to fix the leaks eventually. The stack traces could also be saved to a txt file.</p>
</div>
<div class="ImageContainerWithText">
<div class="image-container"><a href="https://natdanaiputhom.github.io/leaks.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/7/leaks.png" alt="" width="512" height="512" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/7/responsive/leaks-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/7/responsive/leaks-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/7/responsive/leaks-md.png 768w ,https://natdanaiputhom.github.io/media/posts/7/responsive/leaks-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/7/responsive/leaks-xl.png 1600w"></a></div>
<div class="text-container">Scoped tracking</div>
<div> </div>
</div>
<div class="ImageContainerWithText">
<div class="image-container dynamic-size"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/7/leaks2.png" alt="" width="780" height="780" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/7/responsive/leaks2-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/7/responsive/leaks2-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/7/responsive/leaks2-md.png 768w ,https://natdanaiputhom.github.io/media/posts/7/responsive/leaks2-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/7/responsive/leaks2-xl.png 1600w"></div>
<div class="text-container"> </div>
</div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Guinea pig</strong></h5>
<p>Over time, SimpleEngine has evolved, increasingly focusing on implementing new features primarily for testing. This includes the integration of navigation meshes and pathfinding algorithms, as utilized in <a href="https://natdanaiputhom.github.io/streamer-attacked-by-aliens-live-on-stream/" target="_blank" rel="noopener noreferrer">Spite: String of Fate</a>, and the exploration of Entity Component System (ECS), a concept I delved into due to our team's use of FLECS for the Spite project in our TempEngine at The Game Assembly.<br><em>You can read more about my ECS journey here, <a href="https://natdanaiputhom.github.io/entity-component-system/" target="_blank" rel="noopener noreferrer">Entity Component System</a>. </em></p>
<p>There are many more features that I've implemented in the SimpleEngine, but I don't think they're interesting or have enough time to write about. </p>
<p>I intend to persistently enhance SimpleEngine throughout my game development journey, curious to discover where this path will take me. So far, developing SimpleEngine has been a fulfilling experience.</p>
<p class="msg msg--highlight ">We've integrated the Node Scripting System (NSS) into SimpleEngine and are currently working on ensuring compatibility between ECS and NSS. NSS is created by Emil.<em><br>You can read more about his amazing work at <a href="https://broremil.se/visual-scripting.html" target="_blank" rel="noopener noreferrer">https://broremilolofsson.github.io</a></em></p>
<p> </p>
</div>
<div class="ImageContainerWithText">
<div class="image-container dynamic-size"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/7/navmesh.png" alt="" width="1024" height="1024" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/7/responsive/navmesh-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/7/responsive/navmesh-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/7/responsive/navmesh-md.png 768w ,https://natdanaiputhom.github.io/media/posts/7/responsive/navmesh-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/7/responsive/navmesh-xl.png 1600w"></div>
</div>
</div>
<div class="content">
<div class="ImageContainerWithText"><br>
<p><em>If you're interested in source code for SimpleEngine you can find them here at <a href="https://github.com/NatdanaiPuthom/SimpleEngine" target="_blank" rel="noopener noreferrer">https://github.com/NatdanaiPuthom/SimpleEngine</a> </em></p>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Entity Component System</title>
        <author>
            <name>Natdanai Puthom</name>
        </author>
        <link href="https://natdanaiputhom.github.io/entity-component-system/"/>
        <id>https://natdanaiputhom.github.io/entity-component-system/</id>
        <media:content url="https://natdanaiputhom.github.io/media/posts/6/ecs2-2.png" medium="image" />
            <category term="Personal Project"/>

        <updated>2024-04-08T11:17:49+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://natdanaiputhom.github.io/media/posts/6/ecs2-2.png" alt="" />
                    Introduction In this post, I'll assume the reader already has some idea of what an Entity Component System (ECS) is&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://natdanaiputhom.github.io/media/posts/6/ecs2-2.png" class="type:primaryImage" alt="" /></p>
                <p><strong style="font-family: var(--font-base); font-size: 1.125em; letter-spacing: var(--letter-spacing);">Introduction</strong></p>
<div class="content">
<div class="textLeft">
<p>In this post, I'll assume the reader already has some idea of what an Entity Component System (ECS) is and will dive straight into my variant of ECS. This variant intentionally diverges from some ECS principles due to specific design choices and limitations in knowledge, experience, and time. My interest in ECS began with game project 5 at The Game Assembly (TGA), but it was actually in game project 6 where I started to delve deeper into learning about ECS.</p>
<p>From my experience, people find it easier to understand and use architectures like Unity, where game objects contain their components and logic. At TGA, my team tried using FLECS, but despite its excellent documentation, it was challenging to learn within our limited timeframe, causing bottlenecks in gameplay and other systems due to our skill limitations.</p>
<p>Therefore, I would like to try implementing an ECS variant that strikes a balance between a simple user interface and performance. A design that minimizes the possibility of mistakes.</p>
</div>
<div class="image"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/6/ecs2.png" alt="" width="1580" height="1580" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/ecs2-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs2-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs2-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs2-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs2-xl.png 1600w"></figure></div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Goal</strong></h5>
<p>My aim is to develop a straightforward ECS design that mirrors Unity's functionality and is user-friendly for editors, node scripters, and gameplay programmers alike. Most importantly, I aim to enjoy and learn from the process of implementing this design.</p>
<blockquote>
<p class="msg msg--highlight ">It has always been simple. It just was never easy.</p>
</blockquote>
</div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Demo</strong></h5>
<p><em>This isn't the final outcome</em>.</p>
<p>The GIF below demonstrates the RenderSystem in action, interacting with an Entity that contains components such as Transform, Mesh and Animated.</p>
<div class="ImageContainerWithText">
<div class="image-container"><a href="https://natdanaiputhom.github.io/ecs_dragdrop.gif" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/6/ecs_dragdrop.gif" alt="" width="512" height="512"></a></div>
<div class="text-container"><strong>Entity1 has Transform, Mesh, Animated and AnimationController component</strong></div>
<div> </div>
<div><em>(Both models are made by me in Blender and I haven't manage to learn how to fix uv yet. Engine side is working correctly 😀 ) </em></div>
</div>
</div>
<div class="ImageContainerWithText">
<div class="image-container"><a href="https://natdanaiputhom.github.io/ecs_usage.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/6/ecs_usage.png" alt="" width="512" height="512" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_usage-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_usage-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_usage-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_usage-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_usage-xl.png 1600w"></a></div>
<div class="text-container">Here's an example of how ECS is initialized and can be used.</div>
</div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Overview</strong></h5>
<p>Some fundamental include:</p>
<ul>
<li>Create/Remove Entities</li>
<li>Create/Remove Component of type T</li>
<li>Get all components of type T</li>
<li>Get all entities</li>
</ul>
<ul>
<li>EntityManager</li>
<li>ComponentManager</li>
<li>SystemManager</li>
<li>MemoryPools</li>
<li>Entity &amp; IEntity &amp; Entities</li>
<li>And more</li>
</ul>
</div>
<div class="image"><a href="https://natdanaiputhom.github.io/ecs.png" target="_blank" rel="noopener noreferrer"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/6/ecs.png" alt="" width="1580" height="600" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/ecs-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs-xl.png 1600w"></figure></a></div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Entity</strong></h5>
<p>This interface is for Entity, hence it is called IEntity. Users cannot store or create IEntity directly; they must use the EntityManager, which acts as a factory. For debugging purposes during implementation, I've added std::string and padding to reach 64 bytes per IEntity class. I plan to remove these in the future and instead use name and tag components, reducing the IEntity class to 16 bytes.</p>
<div class="image"><a href="https://natdanaiputhom.github.io/entityinterface.png" target="_blank" rel="noopener noreferrer"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/6/entityinterface.png" alt="" width="256" height="256" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/entityinterface-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entityinterface-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entityinterface-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entityinterface-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entityinterface-xl.png 1600w"></figure></a></div>
<p>Entity is defined as 'IEntity* const&amp;'. Why? I wonder the same. It has caused me quite a headache but there's a reason for this, which I'll explain in a bit down this post.</p>
</div>
<div class="image"><a href="https://natdanaiputhom.github.io/entity.png" target="_blank" rel="noopener noreferrer"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/6/entity.png" alt="" width="512" height="512" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/entity-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entity-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entity-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entity-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entity-xl.png 1600w"></figure></a></div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>EntityManager</strong></h5>
<p>All entities created via EntityManager are stored in an EntityPool, a memory pool dedicated to creating and storing IEntity objects. The EntityManager class assigns unique IDs to entities and keeps track of them.</p>
<p>You may have noticed the presence of "myRemovedEntityIDs". At the time, I had planned to create an object pool for entities and components, but I ultimately decided to postpone it due to the complications it introduced and if it was even worth it?</p>
<p> </p>
<div class="ImageContainerWithText">
<div class="image-container"><a href="https://natdanaiputhom.github.io/entitypool.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/6/entitypool.png" alt="" width="256" height="256" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/entitypool-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entitypool-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entitypool-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entitypool-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entitypool-xl.png 1600w"></a></div>
<div class="text-container">EntityPool</div>
</div>
</div>
<div class="image"><a href="https://natdanaiputhom.github.io/EntityManager.png" target="_blank" rel="noopener noreferrer"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/6/EntityManager.png" alt="" width="512" height="512" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/EntityManager-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/EntityManager-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/EntityManager-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/EntityManager-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/EntityManager-xl.png 1600w"></figure></a></div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>ComponentManager</strong></h5>
<p>The ComponentManager functions similarly to the EntityManager, but it contains an unordered map that holds ComponentPools. This design allows for quick retrieval of all components of type T. Additionally, if the ComponentID is known, a constant-time lookup can be used to retrieve a single component. Finally, the ComponentManager includes a map for calling the destructor of components.</p>
<p> </p>
<div class="ImageContainerWithText">
<div class="image-container"><a href="https://natdanaiputhom.github.io/componentpool.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/6/componentpool.png" alt="" width="256" height="256" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/componentpool-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/componentpool-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/componentpool-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/componentpool-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/componentpool-xl.png 1600w"></a></div>
<div class="text-container">ComponentPool</div>
</div>
</div>
<div class="image"><a href="https://natdanaiputhom.github.io/componentManager.png" target="_blank" rel="noopener noreferrer"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/6/componentManager.png" alt="" width="512" height="512" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/componentManager-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/componentManager-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/componentManager-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/componentManager-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/componentManager-xl.png 1600w"></figure></a></div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>SystemManager</strong></h5>
<p>The SystemManager is the most straightforward. It simply manages all systems that have been added and updates them in the order of EarlyUpdate, FixedUpdate, Update, and LateUpdate, including rendering.</p>
<div class="image"><a href="https://natdanaiputhom.github.io/systemupdate.png" target="_blank" rel="noopener noreferrer"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/6/systemupdate-2.png" alt="" width="1580" height="1580" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/systemupdate-2-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/systemupdate-2-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/systemupdate-2-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/systemupdate-2-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/systemupdate-2-xl.png 1600w"></figure></a></div>
</div>
<div class="image"><a href="https://natdanaiputhom.github.io/systemmanager.png" target="_blank" rel="noopener noreferrer"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/6/systemmanager.png" alt="" width="1580" height="1580" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/systemmanager-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/systemmanager-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/systemmanager-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/systemmanager-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/systemmanager-xl.png 1600w"></figure></a></div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Entities</strong></h5>
<p>This specialized class interface is designed for managing entities, ensuring that changes to original entities are reflected accurately when the EntityPool reallocates its size and relocates addresses. This approach prevents users from encountering dangling pointers due to reallocation issues. Accessing entities through this interface is as straightforward as accessing an array. Furthermore, I plan to enhance this interface to filter commonly used entities, such as those with a transform or mesh component, making them easily accessible for various systems.</p>
<p>The Entities class operator[] returns an Entity, which is of type 'IEntity*const&amp;'. This aspect presents a challenge for me to decide upon. The reason is straightforward: I require a reference to a pointer to accurately reflect changes to the Entity, whether it involves removal or relocation of memory address. Simultaneously, I must make it 'const' to prevent accidental reassignment to another entity or nullptr, which could lead to significant issues withing EntityPool.</p>
<p> </p>
</div>
<div class="image"><a href="https://natdanaiputhom.github.io/entities.png" target="_blank" rel="noopener noreferrer"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/6/entities.png" alt="" width="1580" height="1580" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/entities-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entities-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entities-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entities-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/entities-xl.png 1600w"></figure></a></div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>System</strong></h5>
<p>The base System class is relatively straightforward, whereas the derived System classes can become significantly more complex. For instance, the RenderSystem might exclusively target entities possessing Transform, Mesh, and Animated components, while the CollisionSystem might necessitate inter-system communication for data or message exchange. However, these functionalities are not yet implemented.</p>
</div>
<div class="image"><a href="https://natdanaiputhom.github.io/system.png" target="_blank" rel="noopener noreferrer"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/6/system.png" alt="" width="1580" height="1580" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/system-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/system-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/system-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/system-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/system-xl.png 1600w"></figure></a></div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>ECS</strong></h5>
<p>Once ECS.hpp is included, it's ready to use straightforwardly. The goal is to support one or more instances of ECS per level or world. However, I currently don't see the necessity for more than one ECS instance per world, and this interface is lacking several functions, such as RemoveEntity, due to time constraints.</p>
<p> </p>
<div class="ImageContainerWithText">
<div class="image-container"><a href="https://natdanaiputhom.github.io/ecs_include.png" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://natdanaiputhom.github.io/media/posts/6/ecs_include.png" alt="" width="512" height="512" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_include-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_include-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_include-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_include-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_include-xl.png 1600w"></a></div>
<div class="text-container">ECS folder</div>
</div>
</div>
<div class="image"><a href="https://natdanaiputhom.github.io/ecs_interface.png" target="_blank" rel="noopener noreferrer"><figure class="post_image"><img loading="lazy"  src="https://natdanaiputhom.github.io/media/posts/6/ecs_interface-2.png" alt="" width="1580" height="1580" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_interface-2-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_interface-2-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_interface-2-md.png 768w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_interface-2-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/6/responsive/ecs_interface-2-xl.png 1600w"></figure></a></div>
</div>
<div class="content">
<div class="textLeft">
<h5><strong>Discussion</strong></h5>
</div>
</div>
<div class="content">
<div class="textCenterScrollView">
<h6>Entity (IEntity*const&amp;)</h6>
<p>Using a reference for Entity prevents straightforward storage in a standard std::vector. I've opted to store these specific entities indirectly through EntityID. However, this approach requires multiple memory access operations when accessing entities via their IDs, which is not the most efficient method. Nonetheless, after profiling and considering my limited understanding of assembly, it appears that the performance impact of these multiple indirect accesses is currently insignificant. Consequently, I've contemplated using double pointers instead, but this would introduce an additional layer of indirect access. Additionally, it wasn't as user-friendly when attempting to use or pass them as arguments, for example calling *Entity-&gt;AddComponent&lt;T&gt;().</p>
<h6>Reflection</h6>
<p>I am currently working on a reflection system. By using a macro like REGISTER_COMPONENT on a component I want to reflect, it will be added to a list that can be displayed in the editor when clicking on 'AddComponent.' Additionally, I'm trying to implement functionality similar to Unreal Engine's 'UPROPERTY,' which exposes variables to the editor. These features would significantly enhance the ease of working with the ECS in editor and node scripting systems.</p>
<h6>PostMaster</h6>
<p>I've noticed that many systems need to communicate with each other by sending data and messages. To facilitate this, I have yet to decide between using the Observer pattern, which would add an additional layer of inheritance to the System, or implementing a more global system similar to 'PostNord,' which our team developed for Game Project 6 at TGA. Regardless of the approach, I want the systems to wait until the next frame to poll the data when it's their turn to update. This reduces the headache caused by issues where receiving a message triggers an action, which in turn sends another message and activates something else, continuing like a domino effect. I would implement this approach even if it incurs a performance cost, saving me time debugging, unless the impact is substantial.</p>
</div>
</div>
<div class="content">
<div class="textCenterScrollView">
<h5><strong>And more</strong></h5>
<p>There are many aspects I have yet to mention, including missing components and additional features I would like to incorporate. One such consideration is the archetype design.</p>
<p>Another example is how do I optimizing access and loop patterns, structuring them appropriately to prevent multiple threads from accessing components withing the same cache line?</p>
<p>Etc.</p>
<p>So far, this journey has been both enjoyable and rewarding, and I intend to continue exploring and experimenting with different ways to implement and enhance my ECS design. Thank you for reading this far, I'm open to discussion and suggestions, just hit me up!</p>
</div>
</div>
            ]]>
        </content>
    </entry>
</feed>
