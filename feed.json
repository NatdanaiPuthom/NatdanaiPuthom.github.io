{
    "version": "https://jsonfeed.org/version/1",
    "title": "Natdanai Puthom",
    "description": "",
    "home_page_url": "https://natdanaiputhom.github.io",
    "feed_url": "https://natdanaiputhom.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Natdanai Puthom"
    },
    "items": [
        {
            "id": "https://natdanaiputhom.github.io/simpleengine/",
            "url": "https://natdanaiputhom.github.io/simpleengine/",
            "title": "Simpleengine (under constructing)",
            "summary": "Table of Contents (Reading time: 2 minutes) Introduction DirectX11 Animation Loader Animation Blend Profiling Editor Entity Component System (ECS) Reflection&hellip;",
            "content_html": "<div class=\"toc\">\n<h2>Table of Contents (Reading time: 2 minutes)</h2>\n<ol>\n<li><a href=\"#section1\">Introduction</a></li>\n<li><a href=\"#section2\">DirectX11</a></li>\n<li><a href=\"#section3\">Animation Loader</a></li>\n<li><a href=\"#section4\">Animation Blend</a></li>\n<li><a href=\"#section5\">Profiling</a></li>\n<li><a href=\"#section6\">Editor</a></li>\n<li><a href=\"#section7\">Entity Component System (ECS)</a></li>\n<li><a href=\"#section8\">Reflection (ECS)</a></li>\n</ol>\n</div>\n<div class=\"content\">\n<div id=\"section1\" class=\"textLeft\">\n<h5><strong>Introduction</strong></h5>\n<p>Inspired by my experience with 'SimpleJson' in the Tool Development course during my education at The Game Assembly which, ironically, was anything but simple, I set out to craft my own engine, humorously named SimpleEngine. </p>\n<p class=\"msg msg--highlight \">This post was created through the combined efforts of ChatGPT and DeepSeek.</p>\n</div>\n</div>\n<div class=\"content\">\n<div id=\"section2\" class=\"textLeft\">\n<h5><strong>DirectX11</strong></h5>\n<p>SimpleEngine, initially just a fun experiment, became my gateway into graphics programming. In these images, I've implemented a deferred rendering technique combined with Physically Based Rendering (PBR) to achieve more realistic lighting and material effects. In the future, I plan to implement visual effects (VFX) to add more juice to the gameplay.</p>\n<p>Can you see what's wrong in the light calculations in these images? 😀</p>\n</div>\n<div class=\"ImageContainerWithText\">\n<div class=\"image-container dynamic-size offset-down\"><img loading=\"lazy\" src=\"https://natdanaiputhom.github.io/media/posts/7/deferredPointlights.png\" alt=\"\" width=\"512\" height=\"512\" sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://natdanaiputhom.github.io/media/posts/7/responsive/deferredPointlights-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/7/responsive/deferredPointlights-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/7/responsive/deferredPointlights-md.png 768w ,https://natdanaiputhom.github.io/media/posts/7/responsive/deferredPointlights-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/7/responsive/deferredPointlights-xl.png 1600w\"></div>\n<div class=\"text-container\"> </div>\n</div>\n<div class=\"ImageContainerWithText\">\n<div class=\"image-container dynamic-size offset-right offset-down\"><img loading=\"lazy\" src=\"https://natdanaiputhom.github.io/media/posts/7/deferred2.png\" alt=\"\" width=\"512\" height=\"512\" sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://natdanaiputhom.github.io/media/posts/7/responsive/deferred2-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/7/responsive/deferred2-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/7/responsive/deferred2-md.png 768w ,https://natdanaiputhom.github.io/media/posts/7/responsive/deferred2-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/7/responsive/deferred2-xl.png 1600w\"></div>\n<div class=\"text-container\"> </div>\n</div>\n</div>\n<div class=\"content\">\n<div id=\"section3\" class=\"textLeft\">\n<h5><strong>Animation Loader</strong></h5>\n<p>My journey into procedural animation sparked with the captivating experience of Rain World. Witnessing its dynamic animations propelled me into a deep dive into the realm of procedural animation, where I delve into the intricacies of concept like inverse kinematics (IK). Eager to implement this in my project, I first had to tackle the basics: loading models and animations into the engine. Despite my initial lack of knowledge, I successfully integrated models, skeletons, and animations using FBXSDK. This marked the first step toward implementing procedural animation in my engine.</p>\n</div>\n<div class=\"ImageContainerWithText\">\n<div class=\"image-container dynamic-size offset-down\"><img loading=\"lazy\" src=\"https://natdanaiputhom.github.io/media/posts/7/animationworkasitshould.gif\" alt=\"\" width=\"512\" height=\"512\"></div>\n<div class=\"text-container\">Absolutely nothing broke😝</div>\n</div>\n<div class=\"ImageContainerWithText\">\n<div class=\"image-container dynamic-size offset-down offset-right\"><img loading=\"lazy\" src=\"https://natdanaiputhom.github.io/media/posts/7/animationloaded.gif\" alt=\"\" width=\"512\" height=\"512\"></div>\n<div class=\"text-container\">It's working!</div>\n</div>\n</div>\n<div class=\"content\">\n<div id=\"section4\" class=\"textLeft\">\n<h5><strong>Animation Blend</strong></h5>\n<p>This was the second step toward achieving my goal of procedural animation, as I needed to blend different animations together during transitions. To do this, I incorporated linear interpolation to smooth the transitions between animations. The usage is quite simple: we just need to provide the animation clip we want to transition to, along with optional parameters to control the speed, specific frame, and overall smoothness of the transition. This is incredibly useful, as we may often want to transition into the same animation but with different controls depending on the context. The next step is implementing Inverse Kinematics (IK), and I planned to start with the FABRIK algorithm. </p>\n</div>\n<div class=\"ImageContainerWithText\">\n<div class=\"image-container dynamic-size offset-down offset-right\"><img loading=\"lazy\" src=\"https://natdanaiputhom.github.io/media/posts/7/WalkIdleBlend.gif\" alt=\"\" width=\"512\" height=\"512\"></div>\n<div class=\"text-container\">Walk &amp; Idle animations transition blending</div>\n</div>\n</div>\n<div class=\"content\">\n<div id=\"section5\" class=\"textLeft\">\n<h5><strong>Profiling</strong></h5>\n<p>While implementing and testing animations, I encountered significant performance hit and wanted to identify the bottleneck. To achieve this, I integrated a profiling library called 'EasyProfiler' into the engine. The benchmark results revealed that rendering was the primary bottleneck, specifically in animation updates and the rendering process itself. I began with a simple optimization using instanced rendering, which significantly improved performance. For animations, I leveraged a thread pool to update multiple animations in parallel. Additionally, for models sharing the same animation without variations, I optimized further by updating the animation once and reapplying it across all relevant models.</p>\n<p>Lastly, my editor updates were severely impacting performance, dropping from 1000 fps to 200 fps. This was due to my Content Browser, where I was looping through and updating the directory every frame-- and extremely expensive operation. To address this, I refactored the system to create the directory tree node once and only update the relevant directories when the Content Browser is in focus.</p>\n</div>\n<div class=\"ImageContainerWithText\">\n<div class=\"image-container dynamic-size offset-down\"><img loading=\"lazy\" src=\"https://natdanaiputhom.github.io/media/posts/7/200animations.gif\" alt=\"\" width=\"512\" height=\"512\"></div>\n<div class=\"text-container\">200 animations</div>\n</div>\n<div class=\"ImageContainerWithText\">\n<div class=\"image-container dynamic-size offset-down\"><img loading=\"lazy\" src=\"https://natdanaiputhom.github.io/media/posts/7/memoryleaks.png\" alt=\"\" width=\"512\" height=\"512\" sizes=\"(min-width: 37.5em) 1600px, 80vw\" srcset=\"https://natdanaiputhom.github.io/media/posts/7/responsive/memoryleaks-xs.png 384w ,https://natdanaiputhom.github.io/media/posts/7/responsive/memoryleaks-sm.png 600w ,https://natdanaiputhom.github.io/media/posts/7/responsive/memoryleaks-md.png 768w ,https://natdanaiputhom.github.io/media/posts/7/responsive/memoryleaks-lg.png 1200w ,https://natdanaiputhom.github.io/media/posts/7/responsive/memoryleaks-xl.png 1600w\"></div>\n<div class=\"text-container\">Scoped tracking</div>\n</div>\n</div>\n<div class=\"content\">\n<div id=\"section6\" class=\"textLeft\">\n<h5><strong>Editor</strong></h5>\n<p>testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest</p>\n</div>\n</div>\n<div class=\"content\">\n<div id=\"section7\" class=\"textLeft\">\n<h5><strong>Entity Component System</strong></h5>\n<p>testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest</p>\n</div>\n</div>\n<div class=\"content\">\n<div id=\"section8\" class=\"textLeft\">\n<h5><strong>Reflection (ECS)</strong></h5>\n<p>testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest</p>\n</div>\n</div>",
            "image": "https://natdanaiputhom.github.io/media/posts/7/progart.png",
            "author": {
                "name": "Natdanai Puthom"
            },
            "tags": [
                   "Personal Project"
            ],
            "date_published": "2024-04-08T15:35:40+02:00",
            "date_modified": "2025-02-09T16:38:38+01:00"
        }
    ]
}
